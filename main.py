# def orbit_hight(list_1: list)->tuple:
#     dict_1={round(orbit[0]*orbit[1]): orbit for orbit in filter(lambda orbit: orbit[0]!=orbit[1], list_1)} #нихуя не понял но очень интересно
#     return max(dict_1, key=lambda k:dict_1[k]), dict_1[max(dict_1)]
# list_2=[(1,3), (1,34), (123,3), (1123,3), (111,3), (133,3)]
# print(orbit_hight(list_2))





# Напишите функцию same_by(characteristic, objects), которая
# проверяет, все ли объекты имеют одинаковое значение
# некоторой характеристики, и возвращают True, если это так.
# Если значение характеристики для разных объектов
# отличается - то False. Для пустого набора объектов, функция
# должна возвращать True. Аргумент characteristic - это
# функция, которая принимает объект и вычисляет его
# характеристику.

# жоска как-то, не вкурил совсем
# list_1=[0, 2, 4, 8]
# list_2=[]
# def function_1(char, obj):
#     list_2=set(list(map(char, obj)))
#     if len(list_2)>1:
#         print("False")
#     else:
#         print("True")
# char=function_1(lambda x: x%2==0, list_1)




# HOMEWORK

#  Винни-Пух попросил Вас посмотреть, есть ли в его стихах ритм. Поскольку
# разобраться в его кричалках не настолько просто, насколько легко он их придумывает, Вам
# стоит написать программу. Винни-Пух считает, что ритм есть, если число слогов (т.е. число
# гласных букв) в каждой фразе стихотворения одинаковое. Фраза может состоять из одного
# слова, если во фразе несколько слов, то они разделяются дефисами. Фразы отделяются друг
# от друга пробелами. Стихотворение Винни-Пух вбивает в программу с клавиатуры. В ответе
# напишите “Парам пам-пам”, если с ритмом все в порядке и “Пам парам”, если с ритмом все не
# в порядке

# ВОТ ТУТ ПОДУМАЙ КАК ЭТО СДЕЛАТЬ ЧЕРЕЗ ЛЯМБДУ НЕ БУДТЬ ТУПОЙ ... И УМСТВЕННО ОТСТАЛЫМ (не придумал, лямбда не моё, плюс я иду на фронт, так что ладно, буду деградировать)

# list_1=['e', 'y', 'u', 'i','o', 'a', 'E', 'Y', 'U', 'I', 'O', 'A', 'У', 'Е', 'А', 'О', 'Э', 'Я', 'И', 'Ю', 'у', 'е', 'а', 'о', 'э', 'я', 'и', 'ю']
# list_2=str(input('Вини-пух, король чёрных дыр, введи свой тупой стишок, пока в твою чёрную дыру я не загнал что-нибудь: '))
# list_2=list_2.split(' ')
# print(list_2)
# count_1=0
# list_3=[]
# for i in range(len(list_2)):
#     for j in range(len(list_1)):
#         count_1=count_1+list_2[i].count(list_1[j])
#     list_3.append(count_1)
#     count_1=0
# print(list_3)
# for k in range(len(list_3)):
#     if list_3[0]==list_3[i]:
#         count_1=count_1+1
# if count_1==len(list_3):
#     print('Парам пам-пам')
# else:
#     print('Парам парам')



# Напишите функцию print_operation_table(operation, num_rows=6, num_columns=6),
# которая принимает в качестве аргумента функцию, вычисляющую элемент по номеру строки и
# столбца. Аргументы num_rows и num_columns указывают число строк и столбцов таблицы,
# которые должны быть распечатаны. Нумерация строк и столбцов идет с единицы (подумайте,
# почему не с нуля). Примечание: бинарной операцией называется любая операция, у которой
# ровно два аргумента, как, например, у операции умножения.

def table(operation, rows=6, col=6):
    for i in range(1, rows+1):
        list_1=[]
        for j in range(1,col+1):
            list_1.append(operation(i,j))
        print(list_1)

table(lambda x, y: x * y) 